#!/bin/bash
# Auto-generated script for Ubuntu
# Generated from: ubuntu.md
# Mirror ID: ubuntu

gen_tag="Generated by hust-mirrors auto script"

check() {
	source_os_release
	[ "$NAME" = "Ubuntu" ]
}

_ubuntu_install_1() {
	# 替换Ubuntu主仓库
	set_sudo

	if [ -f "/etc/apt/sources.list.d/ubuntu.sources" ]; then
		$sudo mkdir -p "${_backup_dir}" || {
			print_error "Failed to create backup directory"
			return 1
		}
		$sudo cp "/etc/apt/sources.list.d/ubuntu.sources" "${_backup_dir}/ubuntu_1_1.bak" || {
			print_error "Backup /etc/apt/sources.list.d/ubuntu.sources failed"
			return 1
		}
		$sudo sed -i -E 's|^URIs: .*archive.ubuntu.com.*|URIs: $http://$domain/ubuntu/|g' "/etc/apt/sources.list.d/ubuntu.sources" || {
			print_error "Failed to update /etc/apt/sources.list.d/ubuntu.sources"
			return 1
		}
	else
		print_warning "File /etc/apt/sources.list.d/ubuntu.sources does not exist"
	fi

	if [ -f "/etc/apt/sources.list" ]; then
		$sudo mkdir -p "${_backup_dir}" || {
			print_error "Failed to create backup directory"
			return 1
		}
		$sudo cp "/etc/apt/sources.list" "${_backup_dir}/ubuntu_1_2.bak" || {
			print_error "Backup /etc/apt/sources.list failed"
			return 1
		}
		$sudo sed -i -E 's|^deb .*ubuntu.*|deb $http://$domain/ubuntu/|g' "/etc/apt/sources.list" || {
			print_error "Failed to update /etc/apt/sources.list"
			return 1
		}
	else
		print_warning "File /etc/apt/sources.list does not exist"
	fi

	return 0
}

_ubuntu_install_2() {
	# 替换Ubuntu Ports源
	set_sudo

	if [ -f "/etc/apt/sources.list.d/ubuntu.sources" ]; then
		$sudo mkdir -p "${_backup_dir}" || {
			print_error "Failed to create backup directory"
			return 1
		}
		$sudo cp "/etc/apt/sources.list.d/ubuntu.sources" "${_backup_dir}/ubuntu_2_1.bak" || {
			print_error "Backup /etc/apt/sources.list.d/ubuntu.sources failed"
			return 1
		}
		$sudo sed -i -E 's|^URIs: .*ports.ubuntu.com.*|URIs: $http://$domain/ubuntu-ports/|g' "/etc/apt/sources.list.d/ubuntu.sources" || {
			print_error "Failed to update /etc/apt/sources.list.d/ubuntu.sources"
			return 1
		}
	else
		print_warning "File /etc/apt/sources.list.d/ubuntu.sources does not exist"
	fi

	if [ -f "/etc/apt/sources.list" ]; then
		$sudo mkdir -p "${_backup_dir}" || {
			print_error "Failed to create backup directory"
			return 1
		}
		$sudo cp "/etc/apt/sources.list" "${_backup_dir}/ubuntu_2_2.bak" || {
			print_error "Backup /etc/apt/sources.list failed"
			return 1
		}
		$sudo sed -i -E 's|^deb .*ports.ubuntu.com.*|deb $http://$domain/ubuntu-ports/|g' "/etc/apt/sources.list" || {
			print_error "Failed to update /etc/apt/sources.list"
			return 1
		}
	else
		print_warning "File /etc/apt/sources.list does not exist"
	fi

	return 0
}

_ubuntu_install_3() {
	# 替换Ubuntu Security源
	confirm_y "是否 替换Ubuntu Security源?" || return 0

	set_sudo

	if [ -f "/etc/apt/sources.list.d/ubuntu.sources" ]; then
		$sudo mkdir -p "${_backup_dir}" || {
			print_error "Failed to create backup directory"
			return 1
		}
		$sudo cp "/etc/apt/sources.list.d/ubuntu.sources" "${_backup_dir}/ubuntu_3_1.bak" || {
			print_error "Backup /etc/apt/sources.list.d/ubuntu.sources failed"
			return 1
		}
		$sudo sed -i -E 's|^URIs: .*security.ubuntu.com.*|URIs: $http://$domain/ubuntu/|g' "/etc/apt/sources.list.d/ubuntu.sources" || {
			print_error "Failed to update /etc/apt/sources.list.d/ubuntu.sources"
			return 1
		}
	else
		print_warning "File /etc/apt/sources.list.d/ubuntu.sources does not exist"
	fi

	if [ -f "/etc/apt/sources.list" ]; then
		$sudo mkdir -p "${_backup_dir}" || {
			print_error "Failed to create backup directory"
			return 1
		}
		$sudo cp "/etc/apt/sources.list" "${_backup_dir}/ubuntu_3_2.bak" || {
			print_error "Backup /etc/apt/sources.list failed"
			return 1
		}
		$sudo sed -i -E 's|^deb .*security.ubuntu.com.*|deb $http://$domain/ubuntu/|g' "/etc/apt/sources.list" || {
			print_error "Failed to update /etc/apt/sources.list"
			return 1
		}
	else
		print_warning "File /etc/apt/sources.list does not exist"
	fi

	return 0
}

_ubuntu_install_4() {
	# Update Ubuntu APT sources
	confirm_y "Update Ubuntu APT sources?" || return 0

	set_sudo

	# Execute commands
	$sudo apt-get update

	return 0
}

install() {

	_ubuntu_install_1 || return 1
	_ubuntu_install_2 || return 1
	_ubuntu_install_3 || return 1
	_ubuntu_install_4 || return 1
	print_success "Mirror configuration updated successfully"
}

uninstall() {
	# Recover from backup files and execute recovery commands
	print_info "Starting recovery process..."

	# Restore files from backup
	if [ -f "${_backup_dir}/ubuntu_1_1.bak" ]; then
		set_sudo
		$sudo cp "${_backup_dir}/ubuntu_1_1.bak" "/etc/apt/sources.list.d/ubuntu.sources" 2>/dev/null || true
		print_info "Restored /etc/apt/sources.list.d/ubuntu.sources"
	fi
	if [ -f "${_backup_dir}/ubuntu_1_2.bak" ]; then
		set_sudo
		$sudo cp "${_backup_dir}/ubuntu_1_2.bak" "/etc/apt/sources.list" 2>/dev/null || true
		print_info "Restored /etc/apt/sources.list"
	fi
	if [ -f "${_backup_dir}/ubuntu_2_1.bak" ]; then
		set_sudo
		$sudo cp "${_backup_dir}/ubuntu_2_1.bak" "/etc/apt/sources.list.d/ubuntu.sources" 2>/dev/null || true
		print_info "Restored /etc/apt/sources.list.d/ubuntu.sources"
	fi
	if [ -f "${_backup_dir}/ubuntu_2_2.bak" ]; then
		set_sudo
		$sudo cp "${_backup_dir}/ubuntu_2_2.bak" "/etc/apt/sources.list" 2>/dev/null || true
		print_info "Restored /etc/apt/sources.list"
	fi
	if [ -f "${_backup_dir}/ubuntu_3_1.bak" ]; then
		set_sudo
		$sudo cp "${_backup_dir}/ubuntu_3_1.bak" "/etc/apt/sources.list.d/ubuntu.sources" 2>/dev/null || true
		print_info "Restored /etc/apt/sources.list.d/ubuntu.sources"
	fi
	if [ -f "${_backup_dir}/ubuntu_3_2.bak" ]; then
		set_sudo
		$sudo cp "${_backup_dir}/ubuntu_3_2.bak" "/etc/apt/sources.list" 2>/dev/null || true
		print_info "Restored /etc/apt/sources.list"
	fi

	print_success "Recovery completed"
}

can_recover() {
	# Check if any backup files exist
	[ -f "${_backup_dir}/ubuntu_1_1.bak" ] || [ -f "${_backup_dir}/ubuntu_1_2.bak" ] || [ -f "${_backup_dir}/ubuntu_2_1.bak" ] || [ -f "${_backup_dir}/ubuntu_2_2.bak" ] || [ -f "${_backup_dir}/ubuntu_3_1.bak" ] || [ -f "${_backup_dir}/ubuntu_3_2.bak" ]
}

is_deployed() {
	# Check if any replaced file contains domain variable
	[ -f "/etc/apt/sources.list.d/ubuntu.sources" ] && grep -q "$domain" "/etc/apt/sources.list.d/ubuntu.sources" 2>/dev/null && return 1
	[ -f "/etc/apt/sources.list" ] && grep -q "$domain" "/etc/apt/sources.list" 2>/dev/null && return 1
	return 0
}
